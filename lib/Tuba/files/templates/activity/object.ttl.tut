% layout 'default', namespaces => [qw/dcterms xsd prov dbpedia_owl gcis rdf rdfs/];
%= filter_lines_with empty_predicate() => begin
%#
<<%= current_resource %>>
   dcterms:identifier "<%= $activity->identifier %>";

## Duration of the activity
   dcterms:extent [ rdf:value "<%= human_duration ($activity->duration) %>"^^xsd:string ] ;

## Output datafiles   
   dbpedia_owl:filename "<%= $activity->output_artifacts %>"^^xsd:string;

% if ($activity->computing_environment ) {
## Computing environment
   gcis:computingEnvironmentsUsed "<%= $activity->computing_environment %>"^^xsd:string;
% }
   
## assignment of responsibility to an agent for an activity, indicating that the agent 
## had a role in the activity. It further allows for a plan to be specified, which is
## the plan intended by the agent to achieve some goals in the context of this activity.

% if ( $activity->software || $activity->methodology ) {
   prov:qualifiedAssociation [
      a prov:Association ;
      % if ( $activity->software ) {
      prov:agent [
         a prov:SoftwareAgent, gcis:Software ;
         rdfs:label "<%= $activity->software %>"^^xsd:string;
      ] ;
      % } else {
      prov:agent [
         a prov:Agent ;
      ] ;
      % }
      % if ( $activity->methodology ) {
      prov:hadPlan [
         a prov:Plan; 
         rdf:value "<%= $activity->methodology %>"^^xsd:string;
      ] ;
      % }
   ] ;
% }

   a prov:Activity .

% end


% if (my @maps = $activity->publication_maps) {
## The following entity was derived from a dataset using this activity
%# per syntax per Example 4 on PROV-O primer:
   % for my $map (@maps) {
<<%= uri($map->child_publication->to_object) %>>
%#   a gcis:<%= ucfirst($map->child_publication->to_object->meta->table) %>;
   prov:wasDerivedFrom <<%= uri($map->parent_publication->to_object) %>>;
   prov:wasGeneratedBy <<%= current_resource %>>.
   % }
% }
