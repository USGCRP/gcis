%# Is associated with lib/Tuba/files/templates/organizations/object.ttl.ep
## People and Publications:
    % my $ctr = $object->contributors;
       <% for my $ctr (sort {
               ($a->role_type->sort_key <=> $b->role_type->sort_key )
            || ($a->role_type_identifier cmp $b->role_type_identifier )
            || ($a->person && $b->person
                 ?  ($a->person->last_name cmp $b->person->last_name) ||($a->person->first_name cmp $b->person->first_name)
                 : 0 )
             } @{ $object->contributors }) {
        %>
<% for my $map (@{ $ctr->publication_contributor_maps }) { %>
 % my $obj = $map->publication->to_object;
% if (obj_uri_for($ctr->person) ne "") {
<<%= obj_uri_for($obj)->to_abs %>>;
   a gcis:<%= ucfirst($obj->meta->table) %>;
   prov:qualifiedAttribution [
      a prov:Attribution;
      prov:agent <<%= obj_uri_for($ctr->person)->to_abs %>>;
      prov:actedOnBehalfOf <<%= current_resource %>>;
      prov:hadRole "<%= $ctr->role_type->label %>"^^xsd:string;
   ] ;
.
% # The following portion only works if a pub is associated with an org but with no author
% } else {
% my $pub = $object->get_publication;
<<%= obj_uri_for($obj)->to_abs %>>;
   a gcis:<%= ucfirst($obj->meta->table) %>;
   prov:qualifiedAttribution [
      a prov:Attribution;
      prov:agent <<%= current_resource %>>;
      prov:hadRole "<%= $ctr->role_type->label %>"^^xsd:string;
   ] ;
.

% }
% }
% }
